--1) LOI
DROP PROC IF EXISTS EX_1_READ_INFO_UNCOMMITTED_READ  
GO
CREATE PROC EX_1_READ_INFO_UNCOMMITTED_READ
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    BEGIN TRAN 
    BEGIN TRY 
        SELECT * FROM MONAN 

    END TRY 

    BEGIN CATCH 
        ROLLBACK TRAN
        RETURN 0
    END CATCH
    COMMIT TRAN
    RETURN 1
END 
GO

DROP PROC IF EXISTS  EX_1_UPDATE_INFO_UNCOMMITTED_READ
GO 
CREATE PROC EX_1_UPDATE_INFO_UNCOMMITTED_READ
        @MAMA CHAR(6),
        @MATD_MA CHAR(6),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_MA)
        BEGIN
            ROLLBACK TRAN 
            RETURN 0
        END
        UPDATE MONAN SET GIA = @GIA WHERE MAMA = @MAMA AND MATD_DA = @MATD_MA
        SELECT *  FROM MONAN  
        WAITFOR DELAY '00:00:05'  
        IF ( @GIA < 0 )
        BEGIN
            ROLLBACK TRAN 
            RETURN 0
        END
    COMMIT TRAN  
    RETURN 1
END

--2) LOI
DROP PROC IF EXISTS EX_2_READ_INFO_UNCOMMITTED_READ  
GO
CREATE PROC EX_2_READ_INFO_UNCOMMITTED_READ
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    BEGIN TRAN 
    BEGIN TRY 
        SELECT * FROM NHANVIEN

    END TRY 

    BEGIN CATCH 
        ROLLBACK TRAN
        RETURN 0
    END CATCH
    COMMIT TRAN
    RETURN 1
END 

GO



DROP PROC IF EXISTS  EX_2_UPDATE_INFO_UNCOMMITTED_READ
GO 
CREATE PROC EX_2_UPDATE_INFO_UNCOMMITTED_READ
        @MANV CHAR(6),
        @TENNV nvarchar(50)
AS
BEGIN
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM NHANVIEN WHERE MANV = @MANV )
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        UPDATE NHANVIEN SET TENNV = @TENNV WHERE MANV = @MANV 
        SELECT *  FROM NHANVIEN    
        WAITFOR DELAY '00:00:05'  
    ROLLBACK TRAN
    RETURN 1
END

--3 LOI
DROP PROC IF EXISTS EX_3_READ_DH_UNCOMMITTED_READ 
go

CREATE PROC EX_3_READ_DH_UNCOMMITTED_READ
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    BEGIN TRAN 
        BEGIN TRY 
            SELECT * FROM DONHANG

        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_3_UPDATE_DH_UNCOMMITTED_READ
GO
CREATE PROC EX_3_UPDATE_DH_UNCOMMITTED_READ
        @MADH CHAR(50),
        @MAKH CHAR(6),
        @MACN CHAR(6),
        @GHICHU nvarchar(100) 
AS
BEGIN
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM DONHANG WHERE MADH = @MADH AND MAKH = @MAKH)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        UPDATE DONHANG SET GHICHU = @GHICHU WHERE MADH = @MADH AND MAKH = @MAKH
        SELECT *  FROM DONHANG
        WAITFOR DELAY '00:00:05'
    ROLLBACK TRAN 
    RETURN 1
END

--4 LOI
DROP PROC IF EXISTS EX_4_READ_MONAN_UNCOMMITTED_READ 
go

CREATE PROC EX_4_READ_MONAN_UNCOMMITTED_READ
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    BEGIN TRAN 
        BEGIN TRY 
            SELECT * FROM MONAN

        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_4_INSERT_MONAN_UNCOMMITTED_READ
GO
CREATE PROC EX_4_INSERT_MONAN_UNCOMMITTED_READ
        @MATD_DA CHAR(50),
        @MAMA CHAR(6),
        @TENMA nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF  EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA =@MATD_DA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
    INSERT INTO MONAN (MATD_DA, MAMA, TENMA, MIEUTA, GIA) 
    VALUES (@MATD_DA, @MAMA, @TENMA, @MIEUTA, @GIA)        
    SELECT *  FROM MONAN
    WAITFOR DELAY '00:00:05'
    ROLLBACK TRAN 
    RETURN 1
END 

GO


--5) LOI
DROP PROC IF EXISTS EX_5_READ_MENU_UNREPEATABLE_READ 
go

CREATE PROC EX_5_READ_MENU_UNREPEATABLE_READ
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM MONAN

                WAITFOR DELAY '00:00:05'

                SELECT * FROM MONAN
        END TRY 

        BEGIN CATCH 
            ROLLBACK 
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_5_UPDATE_MONAN_UNREPEATABLE_READ  
GO
CREATE PROC EX_5_UPDATE_MONAN_UNREPEATABLE_READ
        @TENMONAN NVARCHAR(50),
        @MAMA CHAR(6),
        @MATD_MA CHAR(6)
AS
BEGIN
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_MA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        UPDATE MONAN SET TENMA = @TENMONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_MA
    COMMIT TRAN 
    RETURN 1
END


--6) LOI
DROP PROC IF EXISTS EX_6_READ_MONAN_UNREPEATABLE_READ 
go

CREATE PROC EX_6_READ_MONAN_UNREPEATABLE_READ
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM MONAN

                WAITFOR DELAY '00:00:05'

                SELECT * FROM MONAN
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_6_UPDATE_MONAN_UNREPEATABLE_READ  
GO
CREATE PROC EX_6_UPDATE_MONAN_UNREPEATABLE_READ
        @TENMONAN NVARCHAR(50),
        @MAMA CHAR(6),
        @MATD_MA CHAR(6),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_MA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        UPDATE MONAN SET GIA = @GIA WHERE MAMA = @MAMA AND MATD_DA = @MATD_MA
    COMMIT TRAN 
    RETURN 1
END
--7 ) LỖI 

DROP PROC IF EXISTS EX_7_READ_NHANVIEN_UNREPEATABLE_READ 
go

CREATE PROC EX_7_READ_NHANVIEN_UNREPEATABLE_READ
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM NHANVIEN

    
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_7_UPDATE_NHANVIEN_UNREPEATABLE_READ  
GO
CREATE PROC EX_7_UPDATE_NHANVIEN_UNREPEATABLE_READ
        @MANV CHAR(6),
        @TENNV NVARCHAR(50)
AS
BEGIN
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM NHANVIEN WHERE MANV = @MANV)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        UPDATE NHANVIEN SET TENNV = @TENNV WHERE MANV = @MANV
             WAITFOR DELAY '00:00:05'

    COMMIT TRAN 
    RETURN 1
END


--8) LOI

DROP PROC IF EXISTS EX_8_READ_DOUONG_UNREPEATABLE_READ 
go

CREATE PROC EX_8_READ_DOUONG_UNREPEATABLE_READ
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM DOUONG


        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_8_UPDATE_DOUONG_UNREPEATABLE_READ  
GO
CREATE PROC EX_8_UPDATE_DOUONG_UNREPEATABLE_READ  
        @MATD_DU CHAR(6),
        @MA_DU NVARCHAR(50),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM DOUONG WHERE MATD_DU = @MATD_DU AND MADU = @MA_DU)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        UPDATE DOUONG SET GIA = @GIA WHERE MATD_DU = @MATD_DU AND MADU = @MA_DU
    WAITFOR DELAY '00:00:05'

    COMMIT TRAN 
    RETURN 1
END
--9) LOI
DROP PROC IF EXISTS EX_9_READ_MONAN_PHANTOM
go

CREATE PROC EX_9_READ_MONAN_PHANTOM
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                WAITFOR DELAY '00:00:05'  
                SELECT * FROM MONAN WITH (NOLOCK)

               
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_9_INSERT_MONAN_PHANTOM 
GO
CREATE PROC EX_9_INSERT_MONAN_PHANTOM 
        @MATD_DA CHAR(50),
        @MAMA CHAR(6),
        @TENMA nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY 
            IF EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_DA)
        BEGIN
            ROLLBACK TRAN 
            RETURN 0
        END
        INSERT INTO MONAN (MATD_DA, MAMA, TENMA, MIEUTA, GIA) VALUES (@MATD_DA, @MAMA, @TENMA, @MIEUTA, @GIA) 
    END TRY


    BEGIN CATCH
        ROLLBACK  
        RETURN 0
    END CATCH

     COMMIT TRAN  
    RETURN 1
END

--10) LOI
DROP PROC IF EXISTS EX_10_READ_NHANVIEN_PHANTOM
go

CREATE PROC EX_10_READ_NHANVIEN_PHANTOM
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                WAITFOR DELAY '00:00:05'  
                SELECT * FROM NHANVIEN WITH (NOLOCK)

        END TRY 

        BEGIN CATCH 
            ROLLBACK 
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_10_INSERT_NHANVIEN_PHANTOM 
GO
CREATE PROC EX_10_INSERT_NHANVIEN_PHANTOM 
        @MANV CHAR(6),
        @TENNV nvarchar(50)
       
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF  EXISTS(SELECT * FROM NHANVIEN WHERE MANV = @MANV )
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        INSERT INTO NHANVIEN(MANV, TENNV) VALUES (@MANV, @TENNV)     
    END TRY


    BEGIN CATCH
        ROLLBACK  
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END

--11) LOI
DROP PROC IF EXISTS EX_11_READ_DONDK_PHANTOM
go

CREATE PROC EX_11_READ_DONDK_PHANTOM
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                WAITFOR DELAY '00:00:05'  

                SELECT * FROM DON_DK WITH (NOLOCK)

        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_11_INSERT_DONDK_PHANTOM 
GO
CREATE PROC EX_11_INSERT_DONDK_PHANTOM 
   @MADDK                char(6)            ,
   @NGUOIDD              nvarchar(30)       ,      
   @TENNH                nvarchar(30)       ,
   @DIACHINH             nvarchar(50)        ,
   @STK                  char(15)           ,
   @EMAIL                nvarchar(50)      ,
   @TENQUAN              nvarchar(50)     ,
   @THANHPHO             nvarchar(50)      ,
   @QUAN                 nvarchar(50)        ,
   @DIACHI               nvarchar(50)       ,
   @SLDONHANGMN          int               ,
   @LOAIAMTHUC           nvarchar(50)       ,
   @SDT                  nvarchar(15)       ,
   @SOCHINHANH           int
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF EXISTS(SELECT * FROM DON_DK WHERE MADDK = @MADDK )
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        INSERT INTO DON_DK(MADDK,NGUOIDD,TENNH,DIACHINH, STK, EMAIL, TENQUAN, THANHPHO,QUAN,DIACHI ,SLDONHANGMN, LOAIAMTHUC,SDT,SOCHINHANH)
        VALUES(@MADDK,@NGUOIDD,@TENNH,@DIACHINH, @STK, @EMAIL, @TENQUAN, @THANHPHO,@QUAN,@DIACHI ,@SLDONHANGMN, @LOAIAMTHUC,@SDT,@SOCHINHANH)

    END TRY


    BEGIN CATCH
        ROLLBACK  
        RETURN 0
    END CATCH

    COMMIT TRAN  
    RETURN 1
END

--12) LOI
DROP PROC IF EXISTS EX_12_READ_TOPING_PHANTOM
go

CREATE PROC EX_12_READ_TOPING_PHANTOM
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                WAITFOR DELAY '00:00:05'  
                SELECT * FROM  TOPING_DA WITH(NOLOCK)

               
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_12_INSERT_TOPING_PHANTOM 
GO
CREATE PROC EX_12_INSERT_TOPING_PHANTOM 
   @MATD_DA                 char(6)             ,
   @MAMA                    char(6)            ,
   @TENTOPING              nvarchar(30)       ,
   @GIA               float               
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF NOT EXISTS(SELECT * FROM TOPING_DA  WHERE MATD_DA = @MATD_DA AND MAMA = @MAMA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
        INSERT INTO TOPING_DA(MATD_DA,MAMA,TENTOPING,GIA)
        VALUES(@MATD_DA,@MAMA,@TENTOPING,@GIA)
    END TRY


    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

     COMMIT TRAN  
    RETURN 1
END

--13)LOI
DROP PROC IF EXISTS EX_13_READ_MONAN
go

CREATE PROC EX_13_READ_MONAN
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
            SELECT * FROM MONAN
            WAITFOR DELAY '00:00:05'
            SELECT * FROM MONAN

        END TRY 

        BEGIN CATCH 
            ROLLBACK 
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_13_INSERT_MONAN
GO
CREATE PROC EX_13_INSERT_MONAN
        @MATD_DA CHAR(50),
        @MAMA CHAR(6),
        @TENMA nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF  EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_DA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
    INSERT INTO MONAN (MATD_DA, MAMA, TENMA, MIEUTA, GIA) 
    VALUES (@MATD_DA, @MAMA, @TENMA, @MIEUTA, @GIA)        
    SELECT *  FROM MONAN
    WAITFOR DELAY '00:00:05'
    COMMIT TRAN 
    RETURN 1
END 

GO

GO
DROP PROC IF EXISTS EX_13_UPDATE_MONAN
GO
CREATE PROC EX_13_UPDATE_MONAN
        @MATD_DA CHAR(50),
        @MAMA CHAR(6),
        @TENMA nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_DA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
  
    SELECT *  FROM MONAN 
    WAITFOR DELAY '00:00:05'
    UPDATE MONAN 
    SET TENMA = @TENMA WHERE MAMA = @MAMA
    COMMIT TRAN 
    RETURN 1
END 

GO

--14)LOI
DROP PROC IF EXISTS EX_14_READ_UONG
go

CREATE PROC EX_14_READ_UONG
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
            SELECT * FROM DOUONG
            WAITFOR DELAY '00:00:05'
            SELECT * FROM DOUONG

        END TRY 

        BEGIN CATCH 
            ROLLBACK 
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_14_INSERT_UONG
GO
CREATE PROC EX_14_INSERT_UONG
        @MATD_DU CHAR(50),
        @MADU CHAR(6),
        @TENDU nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF  EXISTS(SELECT * FROM DOUONG WHERE MADU = @MADU AND MATD_DU = @MATD_DU)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
    INSERT INTO DOUONG (MATD_DU, MADU, TENDU, MIEUTA, GIA) 
    VALUES (@MATD_DU, @MADU, @TENDU, @MIEUTA, @GIA)        
    SELECT *  FROM DOUONG
    WAITFOR DELAY '00:00:05'
    COMMIT TRAN 
    RETURN 1
END 

GO

GO
DROP PROC IF EXISTS EX_14_UPDATE_UONG
GO
CREATE PROC EX_14_UPDATE_UONG
        @MATD_DU CHAR(50),
        @MADU CHAR(6),
        @TENDU nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
    BEGIN TRAN
          IF NOT EXISTS(SELECT * FROM DOUONG WHERE MADU = @MADU AND MATD_DU = @MATD_DU)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
  
    SELECT *  FROM DOUONG 
    WAITFOR DELAY '00:00:05'
    UPDATE DOUONG 
    SET TENDU = @TENDU WHERE MADU = @MADU
    COMMIT TRAN 
    RETURN 1
END 

GO
--15)LOI
DROP PROC IF EXISTS EX_15_READ_MONAN 
go

CREATE PROC EX_15_READ_MONAN
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
            SELECT * FROM MONAN
            WAITFOR DELAY '00:00:05'
            SELECT * FROM MONAN

        END TRY 

        BEGIN CATCH 
            ROLLBACK 
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_15_INSERT_MONAN
GO
CREATE PROC EX_15_INSERT_MONAN
        @MATD_DA CHAR(50),
        @MAMA CHAR(6),
        @TENMA nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF  EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_DA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
    INSERT INTO MONAN (MATD_DA, MAMA, TENMA, MIEUTA, GIA) 
    VALUES (@MATD_DA, @MAMA, @TENMA, @MIEUTA, @GIA)        
    SELECT *  FROM MONAN
    WAITFOR DELAY '00:00:05'
    COMMIT TRAN 
    RETURN 1
END 

GO

GO
DROP PROC IF EXISTS EX_15_UPDATE_MONAN
GO
CREATE PROC EX_15_UPDATE_MONAN
        @MATD_DA CHAR(50),
        @MAMA CHAR(6),
        @TENMA nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
    BEGIN TRAN
        IF NOT EXISTS(SELECT * FROM MONAN WHERE MAMA = @MAMA AND MATD_DA = @MATD_DA)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
  
    SELECT *  FROM MONAN 
    WAITFOR DELAY '00:00:05'
    UPDATE MONAN 
    SET GIA = @GIA WHERE MAMA = @MAMA
    COMMIT TRAN 
    RETURN 1
END 

GO

--16)LOI
DROP PROC IF EXISTS EX_16_READ_UONG
go

CREATE PROC EX_16_READ_UONG
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
            SELECT * FROM DOUONG
            WAITFOR DELAY '00:00:05'
            SELECT * FROM DOUONG

        END TRY 

        BEGIN CATCH 
            ROLLBACK 
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_16_INSERT_UONG
GO
CREATE PROC EX_16_INSERT_UONG
        @MATD_DU CHAR(50),
        @MADU CHAR(6),
        @TENDU nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
    BEGIN TRAN
        IF  EXISTS(SELECT * FROM DOUONG WHERE MADU = @MADU AND MATD_DU = @MATD_DU)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
    INSERT INTO DOUONG (MATD_DU, MADU, TENDU, MIEUTA, GIA) 
    VALUES (@MATD_DU, @MADU, @TENDU, @MIEUTA, @GIA)        
    SELECT *  FROM DOUONG
    WAITFOR DELAY '00:00:05'
    COMMIT TRAN 
    RETURN 1
END 

GO

GO
DROP PROC IF EXISTS EX_16_UPDATE_UONG
GO
CREATE PROC EX_16_UPDATE_UONG
        @MATD_DU CHAR(50),
        @MADU CHAR(6),
        @TENDU nvarchar(50),
        @MIEUTA nvarchar(300),
        @GIA FLOAT
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
    BEGIN TRAN
          IF NOT EXISTS(SELECT * FROM DOUONG WHERE MADU = @MADU AND MATD_DU = @MATD_DU)
        BEGIN
            ROLLBACK  
            RETURN 0
        END
  
    SELECT *  FROM DOUONG 
    WAITFOR DELAY '00:00:05'
    UPDATE DOUONG 
    SET GIA = @GIA WHERE MADU = @MADU
    COMMIT TRAN 
    RETURN 1
END 

GO
--17 LỖI
DROP PROC IF EXISTS EX_17_READ_MONAN_DEADLOCK
go

CREATE PROC EX_17_READ_MONAN_DEADLOCK
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  MONAN 

                WAITFOR DELAY '00:00:13'

                SELECT * FROM  MONAN 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 

GO
DROP PROC IF EXISTS EX_17_UPDATE_TDB_DEADLOCK 
GO
CREATE PROC EX_17_UPDATE_TDB_DEADLOCK 
    @MATD_DA_1    char(6),
    @MAMA_1       char(6),
    @TENMA         nvarchar(30) ,
    @MATD_DA_2    char(6),
    @MAMA_2        char(6),
    @TENMA2       nvarchar(30) 
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL  READ UNCOMMITTED
    BEGIN TRAN
    BEGIN TRY

        IF NOT EXISTS (SELECT * FROM MONAN WHERE MATD_DA = @MATD_DA_1 AND MAMA = @MAMA_1 )
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        IF NOT EXISTS (SELECT * FROM MONAN WHERE MATD_DA = @MATD_DA_2 AND MAMA = @MAMA_2 )
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM MONAN  
        UPDATE MONAN SET TENMA = @TENMA WHERE MATD_DA = @MATD_DA_1 AND MAMA = @MAMA_1
        WAITFOR DELAY '00:00:05'
        UPDATE MONAN SET TENMA = @TENMA2 WHERE MATD_DA = @MATD_DA_2 AND MAMA = @MAMA_2
        SELECT * FROM MONAN  
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END

--18 LỖI
DROP PROC IF EXISTS EX_18_READ_MONAN_DEADLOCK
go

CREATE PROC EX_18_READ_MONAN_DEADLOCK
AS
BEGIN

    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  THUCDON_DA 

                WAITFOR DELAY '00:00:13'

                SELECT * FROM  THUCDON_DA 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 

GO
DROP PROC IF EXISTS EX_18_UPDATE_TDB_DEADLOCK 
GO
CREATE PROC EX_18_UPDATE_TDB_DEADLOCK 
    @MATD_DA_1    char(6),
    @MADT_1          char(6),
    @TENTDDA_1      nvarchar(30) ,
    @MATD_DA_2    char(6),
    @MADT_2          char(6),
    @TENTDDA_2      nvarchar(30) 
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL  READ UNCOMMITTED
    BEGIN TRAN
    BEGIN TRY

        IF NOT EXISTS (SELECT * FROM THUCDON_DA WHERE MATD_DA = @MATD_DA_1 AND MADT = @MADT_1 )
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

          IF NOT EXISTS (SELECT * FROM THUCDON_DA WHERE MATD_DA = @MATD_DA_2 AND MADT = @MADT_2 )
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM THUCDON_DA  
        UPDATE THUCDON_DA SET TENTDDA = @TENTDDA_1 WHERE MATD_DA = @MATD_DA_1 AND MADT = @MADT_1 
        WAITFOR DELAY '00:00:05'
        UPDATE THUCDON_DA SET TENTDDA = @TENTDDA_2 WHERE MATD_DA = @MATD_DA_2 AND MADT = @MADT_2
        SELECT * FROM THUCDON_DA  
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END


--19 LỖI
DROP PROC IF EXISTS EX_19_READ_MONAN_DEADLOCK
go

CREATE PROC EX_19_READ_MONAN_DEADLOCK
AS
BEGIN

    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  THUCDON_DU 

                WAITFOR DELAY '00:00:13'

                SELECT * FROM  THUCDON_DU 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 

GO
DROP PROC IF EXISTS EX_19_UPDATE_TDB_DEADLOCK 
GO
CREATE PROC EX_19_UPDATE_TDB_DEADLOCK 
    @MATD_DU_1    char(6),
    @MADT_1       char(6),
    @TENTDDU_1      nvarchar(50) ,
    @MATD_DU_2    char(6),
    @MADT_2       char(6),
    @TENTDDU_2       nvarchar(50)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL  READ UNCOMMITTED
    BEGIN TRAN
    BEGIN TRY

        IF NOT EXISTS (SELECT * FROM THUCDON_DU WHERE MATD_DU = @MATD_DU_1 AND MADT = @MADT_1 )
        BEGIN
                PRINT 'A'

            ROLLBACK TRAN
            RETURN 1
        END

          IF NOT EXISTS (SELECT * FROM THUCDON_DU WHERE MATD_DU = @MATD_DU_2 AND MADT = @MADT_2 )
        BEGIN
        PRINT 'B'
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM THUCDON_DU  
        UPDATE THUCDON_DU SET TENTDDU = @TENTDDU_1 WHERE MATD_DU = @MATD_DU_1 AND MADT = @MADT_1
        WAITFOR DELAY '00:00:05'
        UPDATE THUCDON_DU SET TENTDDU = @TENTDDU_2 WHERE MATD_DU = @MATD_DU_2 AND MADT = @MADT_2
        SELECT * FROM THUCDON_DU  
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END


--20 LỖI
DROP PROC IF EXISTS EX_20_READ_MONAN_DEADLOCK
go

CREATE PROC EX_20_READ_MONAN_DEADLOCK
AS
BEGIN

    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  MONAN 

                WAITFOR DELAY '00:00:13'

                SELECT * FROM  MONAN 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 

GO
DROP PROC IF EXISTS EX_20_UPDATE_TDB_DEADLOCK 
GO
CREATE PROC EX_20_UPDATE_TDB_DEADLOCK 
    @MATD_DA_1    char(6),
    @MAMA_1       char(6),
    @GIA_1         FLOAT ,
    @MATD_DA_2    char(6),
    @MAMA_2        char(6),
    @GIA_2       FLOAT 
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL  READ UNCOMMITTED
    BEGIN TRAN
    BEGIN TRY

        IF NOT EXISTS (SELECT * FROM MONAN WHERE MATD_DA = @MATD_DA_1 AND MAMA = @MAMA_1 )
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        IF NOT EXISTS (SELECT * FROM MONAN WHERE MATD_DA = @MATD_DA_2 AND MAMA = @MAMA_2 )
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM MONAN  
        UPDATE MONAN SET GIA = @GIA_1 WHERE MATD_DA = @MATD_DA_1 AND MAMA = @MAMA_1
        WAITFOR DELAY '00:00:05'
        UPDATE MONAN SET GIA = @GIA_2 WHERE MATD_DA = @MATD_DA_2 AND MAMA = @MAMA_2
        SELECT * FROM MONAN  
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END

--21) LOI
DROP PROC IF EXISTS EX_21_READ_DONHANG_LOST_UPDATE
go

CREATE PROC EX_21_READ_DONHANG_LOST_UPDATE
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  DONHANG 

                WAITFOR DELAY '00:00:15'

                SELECT * FROM  DONHANG 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 


GO
DROP PROC IF EXISTS EX_21_UPDATE_DONHANG_TXA_LOST_UPDATE 
GO
CREATE PROC EX_21_UPDATE_DONHANG_TXA_LOST_UPDATE 
   @MADH       char(6),
   @MATX       char(6),
   @TINHTRANG  nvarchar(30)   
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF NOT EXISTS (SELECT * FROM TAIXE WHERE MATX = @MATX)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END


        IF NOT EXISTS (SELECT * FROM DONHANG WHERE MADH = @MADH AND (TINHTRANG  = N'Đang chờ xác nhận' OR TINHTRANG IS NULL))
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM DONHANG  WHERE MADH = @MADH 
        WAITFOR DELAY '00:00:10'
        UPDATE DONHANG SET MATX = @MATX, TINHTRANG = @TINHTRANG WHERE MADH = @MADH
        SELECT * FROM DONHANG WHERE MADH = @MADH

    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END


GO
DROP PROC IF EXISTS EX_21_UPDATE_DONHANG_TXB_LOST_UPDATE 
GO
CREATE PROC EX_21_UPDATE_DONHANG_TXB_LOST_UPDATE 
   @MADH       char(6),
   @MATX       char(6),
   @TINHTRANG  nvarchar(30)   
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF NOT EXISTS (SELECT * FROM TAIXE WHERE MATX = @MATX)
        BEGIN
            ROLLBACK TRAN
            RETURN 0
        END

        IF NOT EXISTS (SELECT * FROM DONHANG WHERE MADH = @MADH AND (TINHTRANG  = N'Đang chờ xác nhận' OR TINHTRANG IS NULL))
        BEGIN
            ROLLBACK TRAN
            RETURN 0
        END

        SELECT * FROM DONHANG  WHERE MADH = @MADH 

        UPDATE DONHANG SET MATX = @MATX, TINHTRANG = @TINHTRANG WHERE MADH = @MADH
        SELECT * FROM DONHANG WHERE MADH = @MADH
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END

--22) LOI

DROP PROC IF EXISTS EX_22_READ_SOLUONG_LOST_UPDATE
go

CREATE PROC EX_22_READ_SOLUONG_LOST_UPDATE
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  THUCDON_DA 

                WAITFOR DELAY '00:00:15'

                SELECT * FROM  THUCDON_DA 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 
GO
DROP PROC IF EXISTS EX_22_UPDATE_SOLUONGA_LOST_UPDATE 
GO
CREATE PROC EX_22_UPDATE_SOLUONGA_LOST_UPDATE 
   @MATD_DA      char(6),
   @MADT       char(6),
   @SOLUONGMON  FLOAT
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
    IF EXISTS (SELECT * FROM THUCDON_DA WHERE SOLUONGMON < @SOLUONGMON)
        BEGIN
                PRINT N'LỖI'
            ROLLBACK TRAN
            RETURN 1
        END
        IF NOT EXISTS (SELECT * FROM THUCDON_DA WHERE MATD_DA = @MATD_DA AND MADT = @MADT)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM THUCDON_DA   
        WAITFOR DELAY '00:00:10'
        UPDATE THUCDON_DA SET SOLUONGMON = @SOLUONGMON - 1 WHERE MATD_DA = @MATD_DA AND MADT = @MADT
        SELECT * FROM THUCDON_DA 
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END


GO
DROP PROC IF EXISTS EX_22_UPDATE_SOLUONGB_LOST_UPDATE  
GO
CREATE PROC EX_22_UPDATE_SOLUONGB_LOST_UPDATE 
   @MATD_DA      char(6),
   @MADT       char(6),
   @SOLUONGMON  FLOAT
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF EXISTS (SELECT * FROM THUCDON_DA WHERE SOLUONGMON < @SOLUONGMON)
        BEGIN
            PRINT N'LỖI'

            ROLLBACK TRAN
            RETURN 1
        END
        IF NOT EXISTS (SELECT * FROM THUCDON_DA WHERE MATD_DA = @MATD_DA AND MADT = @MADT)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END
        SELECT * FROM THUCDON_DA   
        UPDATE THUCDON_DA SET SOLUONGMON = @SOLUONGMON - 2 WHERE MATD_DA = @MATD_DA AND MADT = @MADT
        SELECT * FROM THUCDON_DA 
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END

--23) LOI
DROP PROC IF EXISTS EX_23_READ_DONDK_LOST_UPDATE
go

CREATE PROC EX_23_READ_DONDK_LOST_UPDATE
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  DON_DK 

                WAITFOR DELAY '00:00:15'

                SELECT * FROM  DON_DK 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 
GO
DROP PROC IF EXISTS EX_23_UPDATE_DONDKA_LOST_UPDATE 
GO
CREATE PROC EX_23_UPDATE_DONDKA_LOST_UPDATE 
   @MADDK      char(6),
   @MANV       char(6)
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF NOT EXISTS (SELECT * FROM NHANVIEN WHERE MANV = @MANV)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END


        IF NOT EXISTS (SELECT * FROM DON_DK WHERE MADDK = @MADDK AND MANV IS NULL)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM DON_DK  WHERE MADDK = @MADDK 
        WAITFOR DELAY '00:00:10'
        UPDATE DON_DK SET MANV = @MANV WHERE MADDK = @MADDK 
        SELECT * FROM DON_DK WHERE MADDK = @MADDK 
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END


GO
DROP PROC IF EXISTS EX_23_UPDATE_DONDKB_LOST_UPDATE  
GO
CREATE PROC EX_23_UPDATE_DONDKB_LOST_UPDATE 
    @MADDK      char(6),
   @MANV       char(6)
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF NOT EXISTS (SELECT * FROM NHANVIEN WHERE MANV = @MANV)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END


        IF NOT EXISTS (SELECT * FROM DON_DK WHERE MADDK = @MADDK AND MANV IS NULL)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM DON_DK WHERE MADDK = @MADDK

        UPDATE DON_DK SET  MANV = @MANV WHERE  MADDK = @MADDK
        SELECT * FROM DON_DK WHERE MADDK = @MADDK
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END

--24) LOI

DROP PROC IF EXISTS EX_24_READ_SOLUONG_LOST_UPDATE
go

CREATE PROC EX_24_READ_SOLUONG_LOST_UPDATE
AS
BEGIN
    BEGIN TRAN 
        BEGIN TRY 
                SELECT * FROM  THUCDON_DU 

                WAITFOR DELAY '00:00:12'

                SELECT * FROM  THUCDON_DU 
        END TRY 

        BEGIN CATCH 
            ROLLBACK TRAN
            RETURN 0
        END CATCH
    COMMIT TRAN
    RETURN 1
END 
GO
DROP PROC IF EXISTS EX_24_UPDATE_SOLUONGA_LOST_UPDATE 
GO
CREATE PROC EX_24_UPDATE_SOLUONGA_LOST_UPDATE 
   @MATD_DU      char(6),
   @MADT       char(6),
   @SL  FLOAT
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY

        IF EXISTS (SELECT * FROM THUCDON_DU WHERE SL < @SL)
                BEGIN
                        PRINT N'LỖI'
                    ROLLBACK TRAN
                    RETURN 1
                END
        
        IF NOT EXISTS (SELECT * FROM THUCDON_DU WHERE MATD_DU = @MATD_DU AND MADT = @MADT)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END

        SELECT * FROM THUCDON_DU   
        WAITFOR DELAY '00:00:10'
        UPDATE THUCDON_DU SET SL = @SL - 1 WHERE MATD_DU = @MATD_DU AND MADT = @MADT
        SELECT * FROM THUCDON_DU 
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END


GO
DROP PROC IF EXISTS EX_24_UPDATE_SOLUONGB_LOST_UPDATE  
GO
CREATE PROC EX_24_UPDATE_SOLUONGB_LOST_UPDATE 
   @MATD_DU      char(6),
   @MADT       char(6),
   @SL  FLOAT
AS
BEGIN
    BEGIN TRAN
    BEGIN TRY
        IF EXISTS (SELECT * FROM THUCDON_DU WHERE SL < @SL)
            BEGIN
                PRINT N'LỖI'
                ROLLBACK TRAN
                RETURN 1
            END
            
        IF NOT EXISTS (SELECT * FROM THUCDON_DU WHERE MATD_DU = @MATD_DU AND MADT = @MADT)
        BEGIN
            ROLLBACK TRAN
            RETURN 1
        END
        SELECT * FROM THUCDON_DU   
        UPDATE THUCDON_DU SET SL = @SL - 2 WHERE MATD_DU = @MATD_DU AND MADT = @MADT
        SELECT * FROM THUCDON_DU 
    END TRY

    BEGIN CATCH
        ROLLBACK TRAN 
        RETURN 0
    END CATCH

    COMMIT TRAN
    RETURN 1
END


